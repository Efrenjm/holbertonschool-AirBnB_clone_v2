[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "console",
        "description": "console",
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "importPath": "console",
        "description": "console",
        "isExtraImport": true,
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tests",
        "description": "tests",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "kind": 6,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "class DBStorage:\n    \"\"\"The engine that handles the database storage\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Creates the engine instance and starts the session\"\"\"\n        user = os.environ.get('HBNB_MYSQL_USER')\n        pwd = os.environ.get('HBNB_MYSQL_PWD')\n        host = os.environ.get('HBNB_MYSQL_HOST')\n        db = os.environ.get('HBNB_MYSQL_DB')",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "kind": 6,
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "peekOfCode": "class FileStorage:\n    \"\"\"This class manages storage of hbnb models in JSON format\"\"\"\n    __file_path = 'file.json'\n    __objects = {}\n    def all(self, cls=None):\n        \"\"\"Returns a dictionary of models currently in storage\"\"\"\n        if cls is None:\n            return FileStorage.__objects\n        response = {key: val for key, val in FileStorage.__objects.items()\n                    if isinstance(val, cls)}",
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "peekOfCode": "classes = {\"Amenity\": Amenity, \"BaseModel\": BaseModel, \"City\": City,\n           \"Place\": Place, \"Review\": Review, \"State\": State, \"User\": User}\nclass FileStorage:\n    \"\"\"This class manages storage of hbnb models in JSON format\"\"\"\n    __file_path = 'file.json'\n    __objects = {}\n    def all(self, cls=None):\n        \"\"\"Returns a dictionary of models currently in storage\"\"\"\n        if cls is None:\n            return FileStorage.__objects",
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "kind": 6,
        "importPath": "models.amenity",
        "description": "models.amenity",
        "peekOfCode": "class Amenity(BaseModel, Base):\n    \"\"\" The Amenity class, contain name and place amenities table \"\"\"\n    __tablename__ = \"amenities\"\n    name = Column(String(128), nullable=False)\n    place_amenities = relationship(\"Place\", secondary=\"place_amenity\")",
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "class BaseModel:\n    \"\"\"A base class for all hbnb models\"\"\"\n    id = Column(String(60), nullable=False, primary_key=True)\n    created_at = Column(DateTime, nullable=False, default=datetime.now())\n    updated_at = Column(DateTime, nullable=False, default=datetime.now())\n    def __init__(self, *args, **kwargs):\n        \"\"\"Instantiates a new model\"\"\"\n        if not kwargs:\n            from models import storage\n            self.id = str(uuid.uuid4())",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel:\n    \"\"\"A base class for all hbnb models\"\"\"\n    id = Column(String(60), nullable=False, primary_key=True)\n    created_at = Column(DateTime, nullable=False, default=datetime.now())\n    updated_at = Column(DateTime, nullable=False, default=datetime.now())\n    def __init__(self, *args, **kwargs):\n        \"\"\"Instantiates a new model\"\"\"\n        if not kwargs:\n            from models import storage",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "models.city",
        "description": "models.city",
        "peekOfCode": "class City(BaseModel, Base):\n    \"\"\" The city class, contains state ID and name \"\"\"\n    __tablename__ = \"cities\"\n    name = Column(String(128), nullable=False)\n    state_id = Column(String(60), ForeignKey('states.id'), nullable=False)\n    places = relationship(\"Place\", backref=\"cities\", cascade=\"delete\")",
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "Place",
        "kind": 6,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "class Place(BaseModel, Base):\n    \"\"\" A place to stay \"\"\"\n    __tablename__ = \"places\"\n    city_id = Column(String(60), ForeignKey('cities.id'), nullable=False)\n    user_id = Column(String(60), ForeignKey('users.id'), nullable=False)\n    name = Column(String(128), nullable=False)\n    description = Column(String(1024), nullable=True)\n    number_rooms = Column(Integer, nullable=False, default=0)\n    number_bathrooms = Column(Integer, nullable=False, default=0)\n    max_guest = Column(Integer, nullable=False, default=0)",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "association_table",
        "kind": 5,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "association_table = Table(\n    \"place_amenity\", Base.metadata,\n    Column(\"place_id\",\n           String(60),\n           ForeignKey(\"places.id\"),\n           primary_key=True,\n           nullable=False),\n    Column(\"amenity_id\",\n           String(60),\n           ForeignKey(\"amenities.id\"),",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "class Review(BaseModel, Base):\n    \"\"\" Review classto store review information \"\"\"\n    __tablename__ = \"reviews\"\n    place_id = Column(String(60), ForeignKey('places.id'), nullable=False)\n    user_id = Column(String(60), ForeignKey('users.id'), nullable=False)\n    text = Column(String(1024), nullable=False)",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "models.state",
        "description": "models.state",
        "peekOfCode": "class State(BaseModel, Base):\n    \"\"\" State class \"\"\"\n    __tablename__ = \"states\"\n    name = Column(String(128), nullable=False)\n    if os.getenv('HBNB_TYPE_STORAGE') == 'db':\n        cities = relationship('City', backref='state', cascade='all, delete')\n    else:\n        @property\n        def cities(self):\n            \"\"\"getter attribute to return list of City instances\"\"\"",
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(BaseModel, Base):\n    \"\"\"This class defines a user by various attributes\"\"\"\n    __tablename__ = \"users\"\n    email = Column(String(128), nullable=False)\n    password = Column(String(128), nullable=False)\n    first_name = Column(String(128), nullable=True)\n    last_name = Column(String(128), nullable=True)\n    places = relationship(\"Place\", backref=\"user\", cascade=\"delete\")\n    reviews = relationship(\"Review\", backref=\"user\", cascade=\"delete\")",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "test_fileStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_file_storage",
        "description": "tests.test_models.test_engine.test_file_storage",
        "peekOfCode": "class test_fileStorage(unittest.TestCase):\n    \"\"\" Class to test the file storage method \"\"\"\n    def setUp(self):\n        \"\"\" Set up test environment \"\"\"\n        del_list = []\n        for key in storage._FileStorage__objects.keys():\n            del_list.append(key)\n        for key in del_list:\n            del storage._FileStorage__objects[key]\n    def tearDown(self):",
        "detail": "tests.test_models.test_engine.test_file_storage",
        "documentation": {}
    },
    {
        "label": "test_Amenity",
        "kind": 6,
        "importPath": "tests.test_models.test_amenity",
        "description": "tests.test_models.test_amenity",
        "peekOfCode": "class test_Amenity(test_basemodel):\n    \"\"\" Unittest for amenity class \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" test init of class \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Amenity\"\n        self.value = Amenity\n    # def test_name2(self):\n    #     \"\"\" test type of name attribut\"\"\"\n    #     new = self.value()",
        "detail": "tests.test_models.test_amenity",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "kind": 6,
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "peekOfCode": "class test_basemodel(unittest.TestCase):\n    \"\"\" Unittest class for base_model \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test cases initialization \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = 'BaseModel'\n        self.value = BaseModel\n    def setUp(self):\n        \"\"\" setUp \"\"\"\n        pass",
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_City",
        "kind": 6,
        "importPath": "tests.test_models.test_city",
        "description": "tests.test_models.test_city",
        "peekOfCode": "class test_City(test_basemodel):\n    \"\"\" Unittest for City class\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" test initiation of class City\"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"City\"\n        self.value = City\n    # def test_state_id(self):\n    #     \"\"\" test type of state_id attribute \"\"\"\n    #     new = self.value()",
        "detail": "tests.test_models.test_city",
        "documentation": {}
    },
    {
        "label": "test_Place",
        "kind": 6,
        "importPath": "tests.test_models.test_place",
        "description": "tests.test_models.test_place",
        "peekOfCode": "class test_Place(test_basemodel):\n    \"\"\" Unittest for class Place\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" test initialisation of class \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Place\"\n        self.value = Place\n    # def test_city_id(self):\n    #     \"\"\" test type of city_id attribute\"\"\"\n    #     new = self.value()",
        "detail": "tests.test_models.test_place",
        "documentation": {}
    },
    {
        "label": "test_state",
        "kind": 6,
        "importPath": "tests.test_models.test_review",
        "description": "tests.test_models.test_review",
        "peekOfCode": "class test_state(test_basemodel):\n    \"\"\" Unittest of State class \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" test of initialisation \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"State\"\n        self.value = State\n    # def test_name3(self):\n    #     \"\"\" test of type name attribute \"\"\"\n    #     new = self.value()",
        "detail": "tests.test_models.test_review",
        "documentation": {}
    },
    {
        "label": "test_state",
        "kind": 6,
        "importPath": "tests.test_models.test_state",
        "description": "tests.test_models.test_state",
        "peekOfCode": "class test_state(test_basemodel):\n    \"\"\" Unittest of State class \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" test of initialisation \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"State\"\n        self.value = State\n    # def test_name3(self):\n    #     \"\"\" test of type name attribute \"\"\"\n    #     new = self.value()",
        "detail": "tests.test_models.test_state",
        "documentation": {}
    },
    {
        "label": "test_Amenity",
        "kind": 6,
        "importPath": "tests.test_models.test_user",
        "description": "tests.test_models.test_user",
        "peekOfCode": "class test_Amenity(test_basemodel):\n    \"\"\" Unittest for amenity class\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" test init of class \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Amenity\"\n        self.value = Amenity\n    # def test_name2(self):\n    #     \"\"\" test type of name attribut\"\"\"\n    #     new = self.value()",
        "detail": "tests.test_models.test_user",
        "documentation": {}
    },
    {
        "label": "TestConsole",
        "kind": 6,
        "importPath": "tests.test_console",
        "description": "tests.test_console",
        "peekOfCode": "class TestConsole(unittest.TestCase):\n    \"\"\" this will test the console \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"setup for the test\"\"\"\n        cls.consol = HBNBCommand()\n    @classmethod\n    def teardown(cls):\n        \"\"\"at the end of the test this will tear it down\"\"\"\n        del cls.consol",
        "detail": "tests.test_console",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.0-hello_route",
        "description": "web_flask.0-hello_route",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.0-hello_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.0-hello_route",
        "description": "web_flask.0-hello_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.0-hello_route",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.1-hbnb_route",
        "description": "web_flask.1-hbnb_route",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.1-hbnb_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.1-hbnb_route",
        "description": "web_flask.1-hbnb_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.1-hbnb_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.1-hbnb_route",
        "description": "web_flask.1-hbnb_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.1-hbnb_route",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\nif __name__ == '__main__':",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "show_c",
        "kind": 2,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "def show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "show_c",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "show_python",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "show_c",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\n@app.route('/number/<int:n>', strict_slashes=False)\ndef show_number(n):",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "show_python",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\n@app.route('/number/<int:n>', strict_slashes=False)\ndef show_number(n):\n    return \"{} is a number\".format(n)\n@app.route('number_template(<int:n>)', strict_slashes=False)\ndef show_template(n):\n    if isinstance(n, int):\n        return render_template('number_template.html', number=n)",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "show_number",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def show_number(n):\n    return \"{} is a number\".format(n)\n@app.route('number_template(<int:n>)', strict_slashes=False)\ndef show_template(n):\n    if isinstance(n, int):\n        return render_template('number_template.html', number=n)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "show_template",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def show_template(n):\n    if isinstance(n, int):\n        return render_template('number_template.html', number=n)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "show_c",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\n@app.route('/number/<int:n>', strict_slashes=False)\ndef show_number(n):",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "show_python",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\n@app.route('/number/<int:n>', strict_slashes=False)\ndef show_number(n):\n    return \"{} is a number\".format(n)\n@app.route('/number_template/<int:n>', strict_slashes=False)\ndef show_template(n):\n    return render_template('5-number.html', number=n)\nif __name__ == '__main__':",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "show_number",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def show_number(n):\n    return \"{} is a number\".format(n)\n@app.route('/number_template/<int:n>', strict_slashes=False)\ndef show_template(n):\n    return render_template('5-number.html', number=n)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "show_template",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def show_template(n):\n    return render_template('5-number.html', number=n)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "hello_hbnb",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "show_c",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def show_c(text):\n    text = text.replace('_', ' ')\n    return \"C {}\".format(text)\n@app.route('/python/', defaults={'text': 'is cool'}, strict_slashes=False)\n@app.route('/python/<text>', strict_slashes=False)\ndef show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\n@app.route('/number/<int:n>', strict_slashes=False)\ndef show_number(n):",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "show_python",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def show_python(text):\n    text = text.replace('_', ' ')\n    return \"Python {}\".format(text)\n@app.route('/number/<int:n>', strict_slashes=False)\ndef show_number(n):\n    return \"{} is a number\".format(n)\n@app.route('/number_template/<int:n>', strict_slashes=False)\ndef show_template(n):\n    return render_template('5-number.html', number=n)\n@app.route('/number_odd_or_even/<int:n>', strict_slashes=False)",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "show_number",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def show_number(n):\n    return \"{} is a number\".format(n)\n@app.route('/number_template/<int:n>', strict_slashes=False)\ndef show_template(n):\n    return render_template('5-number.html', number=n)\n@app.route('/number_odd_or_even/<int:n>', strict_slashes=False)\ndef show_evenness(n):\n    if n % 2 == 0:\n        evenness = 'even'\n    else:",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "show_template",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def show_template(n):\n    return render_template('5-number.html', number=n)\n@app.route('/number_odd_or_even/<int:n>', strict_slashes=False)\ndef show_evenness(n):\n    if n % 2 == 0:\n        evenness = 'even'\n    else:\n        evenness = 'odd'\n    return render_template('6-number_odd_or_even.html',\n                           number=n, evenness=evenness)",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "show_evenness",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def show_evenness(n):\n    if n % 2 == 0:\n        evenness = 'even'\n    else:\n        evenness = 'odd'\n    return render_template('6-number_odd_or_even.html',\n                           number=n, evenness=evenness)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef hello_hbnb():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef show_c(text):\n    text = text.replace('_', ' ')",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "states_list",
        "kind": 2,
        "importPath": "web_flask.7-states_list",
        "description": "web_flask.7-states_list",
        "peekOfCode": "def states_list():\n    \"\"\"display a HTML page with the states listed in alphabetical order\"\"\"\n    all_states = list(storage.all(State).values())\n    all_states.sort(key=lambda x: x.name)\n    return render_template('7-states_list.html', states=all_states)\n@app.teardown_appcontext\ndef teardown_db(exception):\n    \"\"\"closes the storage on teardown\"\"\"\n    storage.close()\nif __name__ == '__main__':",
        "detail": "web_flask.7-states_list",
        "documentation": {}
    },
    {
        "label": "teardown_db",
        "kind": 2,
        "importPath": "web_flask.7-states_list",
        "description": "web_flask.7-states_list",
        "peekOfCode": "def teardown_db(exception):\n    \"\"\"closes the storage on teardown\"\"\"\n    storage.close()\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port='5000')",
        "detail": "web_flask.7-states_list",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.7-states_list",
        "description": "web_flask.7-states_list",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/states_list', strict_slashes=False)\ndef states_list():\n    \"\"\"display a HTML page with the states listed in alphabetical order\"\"\"\n    all_states = list(storage.all(State).values())\n    all_states.sort(key=lambda x: x.name)\n    return render_template('7-states_list.html', states=all_states)\n@app.teardown_appcontext\ndef teardown_db(exception):\n    \"\"\"closes the storage on teardown\"\"\"",
        "detail": "web_flask.7-states_list",
        "documentation": {}
    },
    {
        "label": "cities_by_states",
        "kind": 2,
        "importPath": "web_flask.8-cities_by_states",
        "description": "web_flask.8-cities_by_states",
        "peekOfCode": "def cities_by_states():\n    '''The cities_by_states page.'''\n    all_states = list(storage.all(State).values())\n    all_states.sort(key=lambda x: x.name)\n    for state in all_states:\n        state.cities.sort(key=lambda x: x.name)\n    return render_template('8-cities_by_states.html', states=all_states)\n@app.teardown_appcontext\ndef flask_teardown(exc):\n    '''The Flask app/request context end event listener.'''",
        "detail": "web_flask.8-cities_by_states",
        "documentation": {}
    },
    {
        "label": "flask_teardown",
        "kind": 2,
        "importPath": "web_flask.8-cities_by_states",
        "description": "web_flask.8-cities_by_states",
        "peekOfCode": "def flask_teardown(exc):\n    '''The Flask app/request context end event listener.'''\n    storage.close()\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port='5000')",
        "detail": "web_flask.8-cities_by_states",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.8-cities_by_states",
        "description": "web_flask.8-cities_by_states",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/cities_by_states', strict_slashes=False)\ndef cities_by_states():\n    '''The cities_by_states page.'''\n    all_states = list(storage.all(State).values())\n    all_states.sort(key=lambda x: x.name)\n    for state in all_states:\n        state.cities.sort(key=lambda x: x.name)\n    return render_template('8-cities_by_states.html', states=all_states)\n@app.teardown_appcontext",
        "detail": "web_flask.8-cities_by_states",
        "documentation": {}
    },
    {
        "label": "states",
        "kind": 2,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "def states(id=None):\n    '''The states page.'''\n    states = None\n    state = None\n    all_states = list(storage.all(State).values())\n    case = 404\n    if id is not None:\n        res = list(filter(lambda x: x.id == id, all_states))\n        if len(res) > 0:\n            state = res[0]",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "flask_teardown",
        "kind": 2,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "def flask_teardown(exc):\n    '''The Flask app/request context end event listener.'''\n    storage.close()\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port='5000')",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "app = Flask(__name__)\n'''The Flask application instance.'''\napp.url_map.strict_slashes = False\n@app.route('/states', strict_slashes=False)\n@app.route('/states/<id>', strict_slashes=False)\ndef states(id=None):\n    '''The states page.'''\n    states = None\n    state = None\n    all_states = list(storage.all(State).values())",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "app.url_map.strict_slashes",
        "kind": 5,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "app.url_map.strict_slashes = False\n@app.route('/states', strict_slashes=False)\n@app.route('/states/<id>', strict_slashes=False)\ndef states(id=None):\n    '''The states page.'''\n    states = None\n    state = None\n    all_states = list(storage.all(State).values())\n    case = 404\n    if id is not None:",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "kind": 6,
        "importPath": "console",
        "description": "console",
        "peekOfCode": "class HBNBCommand(cmd.Cmd):\n    \"\"\" Contains the functionality for the HBNB console\"\"\"\n    # determines prompt for interactive/non-interactive modes\n    prompt = '(hbnb) ' if sys.__stdin__.isatty() else ''\n    classes = {\n               'BaseModel': BaseModel, 'User': User, 'Place': Place,\n               'State': State, 'City': City, 'Amenity': Amenity,\n               'Review': Review\n              }\n    dot_cmds = ['all', 'count', 'show', 'destroy', 'update']",
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "fs",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "fs = FileStorage()\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create a new State\nnew_state = State()\nnew_state.name = \"California\"\nfs.new(new_state)",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create a new State\nnew_state = State()\nnew_state.name = \"California\"\nfs.new(new_state)\nfs.save()\nprint(\"New State: {}\".format(new_state))",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "new_state",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "new_state = State()\nnew_state.name = \"California\"\nfs.new(new_state)\nfs.save()\nprint(\"New State: {}\".format(new_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "new_state.name",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "new_state.name = \"California\"\nfs.new(new_state)\nfs.save()\nprint(\"New State: {}\".format(new_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create another State",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create another State\nanother_state = State()\nanother_state.name = \"Nevada\"\nfs.new(another_state)\nfs.save()\nprint(\"Another State: {}\".format(another_state))",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "another_state",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "another_state = State()\nanother_state.name = \"Nevada\"\nfs.new(another_state)\nfs.save()\nprint(\"Another State: {}\".format(another_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])        ",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "another_state.name",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "another_state.name = \"Nevada\"\nfs.new(another_state)\nfs.save()\nprint(\"Another State: {}\".format(another_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])        \n# Delete the new State",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])        \n# Delete the new State\nfs.delete(new_state)\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "state = State(name=\"California\")\nstate.save()\n# creation of a City\ncity = City(state_id=state.id, name=\"San Francisco\")\ncity.save()\n# creation of a User\nuser = User(email=\"john@snow.com\", password=\"johnpwd\")\nuser.save()\n# creation of 2 Places\nplace_1 = Place(user_id=user.id, city_id=city.id, name=\"House 1\")",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "city",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "city = City(state_id=state.id, name=\"San Francisco\")\ncity.save()\n# creation of a User\nuser = User(email=\"john@snow.com\", password=\"johnpwd\")\nuser.save()\n# creation of 2 Places\nplace_1 = Place(user_id=user.id, city_id=city.id, name=\"House 1\")\nplace_1.save()\nplace_2 = Place(user_id=user.id, city_id=city.id, name=\"House 2\")\nplace_2.save()",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "user = User(email=\"john@snow.com\", password=\"johnpwd\")\nuser.save()\n# creation of 2 Places\nplace_1 = Place(user_id=user.id, city_id=city.id, name=\"House 1\")\nplace_1.save()\nplace_2 = Place(user_id=user.id, city_id=city.id, name=\"House 2\")\nplace_2.save()\n# creation of 3 various Amenity\namenity_1 = Amenity(name=\"Wifi\")\namenity_1.save()",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "place_1",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "place_1 = Place(user_id=user.id, city_id=city.id, name=\"House 1\")\nplace_1.save()\nplace_2 = Place(user_id=user.id, city_id=city.id, name=\"House 2\")\nplace_2.save()\n# creation of 3 various Amenity\namenity_1 = Amenity(name=\"Wifi\")\namenity_1.save()\namenity_2 = Amenity(name=\"Cable\")\namenity_2.save()\namenity_3 = Amenity(name=\"Oven\")",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "place_2",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "place_2 = Place(user_id=user.id, city_id=city.id, name=\"House 2\")\nplace_2.save()\n# creation of 3 various Amenity\namenity_1 = Amenity(name=\"Wifi\")\namenity_1.save()\namenity_2 = Amenity(name=\"Cable\")\namenity_2.save()\namenity_3 = Amenity(name=\"Oven\")\namenity_3.save()\n# link place_1 with 2 amenities",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "amenity_1",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "amenity_1 = Amenity(name=\"Wifi\")\namenity_1.save()\namenity_2 = Amenity(name=\"Cable\")\namenity_2.save()\namenity_3 = Amenity(name=\"Oven\")\namenity_3.save()\n# link place_1 with 2 amenities\nplace_1.amenities.append(amenity_1)\nplace_1.amenities.append(amenity_2)\n# link place_2 with 3 amenities",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "amenity_2",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "amenity_2 = Amenity(name=\"Cable\")\namenity_2.save()\namenity_3 = Amenity(name=\"Oven\")\namenity_3.save()\n# link place_1 with 2 amenities\nplace_1.amenities.append(amenity_1)\nplace_1.amenities.append(amenity_2)\n# link place_2 with 3 amenities\nplace_2.amenities.append(amenity_1)\nplace_2.amenities.append(amenity_2)",
        "detail": "main_place_amenities",
        "documentation": {}
    },
    {
        "label": "amenity_3",
        "kind": 5,
        "importPath": "main_place_amenities",
        "description": "main_place_amenities",
        "peekOfCode": "amenity_3 = Amenity(name=\"Oven\")\namenity_3.save()\n# link place_1 with 2 amenities\nplace_1.amenities.append(amenity_1)\nplace_1.amenities.append(amenity_2)\n# link place_2 with 3 amenities\nplace_2.amenities.append(amenity_1)\nplace_2.amenities.append(amenity_2)\nplace_2.amenities.append(amenity_3)\nstorage.save()",
        "detail": "main_place_amenities",
        "documentation": {}
    }
]