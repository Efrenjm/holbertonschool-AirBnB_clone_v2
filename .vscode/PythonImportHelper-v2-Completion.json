[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "importPath": "console",
        "description": "console",
        "isExtraImport": true,
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "importPath": "console",
        "description": "console",
        "isExtraImport": true,
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "importPath": "console",
        "description": "console",
        "isExtraImport": true,
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MySQLdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MySQLdb",
        "description": "MySQLdb",
        "detail": "MySQLdb",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models.__init__",
        "description": "models.__init__",
        "isExtraImport": true,
        "detail": "models.__init__",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "kind": 6,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "class DBStorage:\n    \"\"\"Storage engine for the database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Create a new instance of DBStorage\"\"\"\n        self.__engine = create_engine(\n            f\"mysql+mysqldb://{USER}:{PWD}@{HOST}/{DB}\", pool_pre_ping=True)\n        if getenv('HBNB_ENV') == 'test':\n            Base.metadata.drop_all(self.__engine)",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "USER",
        "kind": 5,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "USER = getenv('HBNB_MYSQL_USER')\nPWD = getenv('HBNB_MYSQL_PWD')\nHOST = getenv('HBNB_MYSQL_HOST')\nDB = getenv('HBNB_MYSQL_DB')\nclasses = {'User': User, 'Place': Place, 'State': State,\n           'City': City, 'Amenity': Amenity, 'Review': Review}\nclass DBStorage:\n    \"\"\"Storage engine for the database\"\"\"\n    __engine = None\n    __session = None",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "PWD",
        "kind": 5,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "PWD = getenv('HBNB_MYSQL_PWD')\nHOST = getenv('HBNB_MYSQL_HOST')\nDB = getenv('HBNB_MYSQL_DB')\nclasses = {'User': User, 'Place': Place, 'State': State,\n           'City': City, 'Amenity': Amenity, 'Review': Review}\nclass DBStorage:\n    \"\"\"Storage engine for the database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "HOST = getenv('HBNB_MYSQL_HOST')\nDB = getenv('HBNB_MYSQL_DB')\nclasses = {'User': User, 'Place': Place, 'State': State,\n           'City': City, 'Amenity': Amenity, 'Review': Review}\nclass DBStorage:\n    \"\"\"Storage engine for the database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Create a new instance of DBStorage\"\"\"",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "DB",
        "kind": 5,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "DB = getenv('HBNB_MYSQL_DB')\nclasses = {'User': User, 'Place': Place, 'State': State,\n           'City': City, 'Amenity': Amenity, 'Review': Review}\nclass DBStorage:\n    \"\"\"Storage engine for the database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Create a new instance of DBStorage\"\"\"\n        self.__engine = create_engine(",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "classes = {'User': User, 'Place': Place, 'State': State,\n           'City': City, 'Amenity': Amenity, 'Review': Review}\nclass DBStorage:\n    \"\"\"Storage engine for the database\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Create a new instance of DBStorage\"\"\"\n        self.__engine = create_engine(\n            f\"mysql+mysqldb://{USER}:{PWD}@{HOST}/{DB}\", pool_pre_ping=True)",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "kind": 6,
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "peekOfCode": "class FileStorage:\n    \"\"\"This class manages storage of hbnb models in JSON format\"\"\"\n    __file_path = 'file.json'\n    __objects = {}\n    def all(self, cls=None):\n        \"\"\"Returns a dictionary of models currently in storage\"\"\"\n        if cls:\n            dictio = {}\n            for key, val in FileStorage.__objects.items():\n                if cls.__name__ in key:",
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "class BaseModel:\n    \"\"\"A base class for all hbnb models\"\"\"\n    if getenv('HBNB_TYPE_STORAGE') == 'db':\n        id = Column(String(60), unique=True, nullable=False, primary_key=True)\n        created_at = Column(DateTime, nullable=False,\n                            default=datetime.utcnow())\n        updated_at = Column(DateTime, nullable=False,\n                            default=datetime.utcnow())\n    def __init__(self, *args, **kwargs):\n        \"\"\"Instantiates a new model\"\"\"",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel:\n    \"\"\"A base class for all hbnb models\"\"\"\n    if getenv('HBNB_TYPE_STORAGE') == 'db':\n        id = Column(String(60), unique=True, nullable=False, primary_key=True)\n        created_at = Column(DateTime, nullable=False,\n                            default=datetime.utcnow())\n        updated_at = Column(DateTime, nullable=False,\n                            default=datetime.utcnow())\n    def __init__(self, *args, **kwargs):",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "TestDBStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_db_storage",
        "description": "tests.test_models.test_engine.test_db_storage",
        "peekOfCode": "class TestDBStorage(unittest.TestCase):\n    \"\"\" Test class for dbstorage \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test filestorage instantiation \"\"\"\n        super().__init__(*args, **kwargs)\n        self.console = HBNBCommand()\n    def setUp(self):\n        \"\"\" Test set up \"\"\"\n        pass\n    def tearDown(self):",
        "detail": "tests.test_models.test_engine.test_db_storage",
        "documentation": {}
    },
    {
        "label": "test_fileStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_file_storage",
        "description": "tests.test_models.test_engine.test_file_storage",
        "peekOfCode": "class test_fileStorage(test_basemodel):\n    \"\"\" Class to test the file storage method \"\"\"\n    def setUp(self):\n        \"\"\" Set up test environment \"\"\"\n        pass\n    def tearDown(self):\n        \"\"\" Remove storage file at end of tests \"\"\"\n        try:\n            os.remove('file.json')\n        except:",
        "detail": "tests.test_models.test_engine.test_file_storage",
        "documentation": {}
    },
    {
        "label": "test_Amenity",
        "kind": 6,
        "importPath": "tests.test_models.test_amenity",
        "description": "tests.test_models.test_amenity",
        "peekOfCode": "class test_Amenity(test_basemodel):\n    \"\"\" Test class amenity\"\"\"\n    def setUp(self):\n        \"\"\" \"\"\"\n        pass\n    def tearDown(self):\n        \"\"\"Test removing json file or closing database connection\"\"\"\n        pass\n    def test_instantiation(self, *args, **kwargs):\n        \"\"\" Test the amenity instantiation\"\"\"",
        "detail": "tests.test_models.test_amenity",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "kind": 6,
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "peekOfCode": "class test_basemodel(unittest.TestCase):\n    \"\"\" Test class basemodel\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test basemodel instantiation\"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = 'BaseModel'\n        self.value = BaseModel\n    def setUp(self):\n        \"\"\" Test set up \"\"\"\n        pass",
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_City",
        "kind": 6,
        "importPath": "tests.test_models.test_city",
        "description": "tests.test_models.test_city",
        "peekOfCode": "class test_City(test_basemodel):\n    \"\"\" Test class for city\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test class instantiation \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"City\"\n        self.value = City\n    def setUp(self):\n        \"\"\" Test set up \"\"\"\n        pass",
        "detail": "tests.test_models.test_city",
        "documentation": {}
    },
    {
        "label": "test_Place",
        "kind": 6,
        "importPath": "tests.test_models.test_place",
        "description": "tests.test_models.test_place",
        "peekOfCode": "class test_Place(test_basemodel):\n    \"\"\" Test for place class\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test Place instantiation\"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Place\"\n        self.value = Place\n    def test_city_id(self):\n        \"\"\" Test city id type \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_place",
        "documentation": {}
    },
    {
        "label": "test_review",
        "kind": 6,
        "importPath": "tests.test_models.test_review",
        "description": "tests.test_models.test_review",
        "peekOfCode": "class test_review(test_basemodel):\n    \"\"\" Test class for review \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test review class instantiation \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Review\"\n        self.value = Review\n    def test_place_id(self):\n        \"\"\" Test place id type \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_review",
        "documentation": {}
    },
    {
        "label": "test_state",
        "kind": 6,
        "importPath": "tests.test_models.test_state",
        "description": "tests.test_models.test_state",
        "peekOfCode": "class test_state(test_basemodel):\n    \"\"\" Test class for state\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test State instantiation\"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"State\"\n        self.value = State\n    def test_name3(self):\n        \"\"\" Test name type\"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_state",
        "documentation": {}
    },
    {
        "label": "test_User",
        "kind": 6,
        "importPath": "tests.test_models.test_user",
        "description": "tests.test_models.test_user",
        "peekOfCode": "class test_User(test_basemodel):\n    \"\"\" Test class for user\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" Test User instantiation \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"User\"\n        self.value = User\n    def test_first_name(self):\n        \"\"\" Test first name type \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_user",
        "documentation": {}
    },
    {
        "label": "test_console",
        "kind": 6,
        "importPath": "tests.test_console",
        "description": "tests.test_console",
        "peekOfCode": "class test_console(unittest.TestCase):\n    \"\"\" Class to test the file storage method \"\"\"\n    def setUp(self):\n        self.console = HBNBCommand()\n    @patch('builtins.print')\n    def test_do_create_int(self, mock_print):\n        try:\n            HBNBCommand.do_create(self, \"Place number_rooms=four\")\n        except ValueError:\n            self.assertNotIsInstance(int, type(Place.number_rooms))",
        "detail": "tests.test_console",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.0-hello_route",
        "description": "web_flask.0-hello_route",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.0-hello_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.0-hello_route",
        "description": "web_flask.0-hello_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.0-hello_route",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.1-hbnb_route",
        "description": "web_flask.1-hbnb_route",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.1-hbnb_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.1-hbnb_route",
        "description": "web_flask.1-hbnb_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.1-hbnb_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.1-hbnb_route",
        "description": "web_flask.1-hbnb_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.1-hbnb_route",
        "documentation": {}
    },
    {
        "label": "remove_current_session",
        "kind": 2,
        "importPath": "web_flask.10-hbnb_filters",
        "description": "web_flask.10-hbnb_filters",
        "peekOfCode": "def remove_current_session(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/hbnb_filters', strict_slashes=False)\ndef load_filters():\n    \"\"\"Load State, City and Amenity filters if found\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    amenities = sorted(storage.all(Amenity).values(), key=lambda z: z.name)\n    for state in states:\n        cities = sorted(state.cities, key=lambda y: y.name)",
        "detail": "web_flask.10-hbnb_filters",
        "documentation": {}
    },
    {
        "label": "load_filters",
        "kind": 2,
        "importPath": "web_flask.10-hbnb_filters",
        "description": "web_flask.10-hbnb_filters",
        "peekOfCode": "def load_filters():\n    \"\"\"Load State, City and Amenity filters if found\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    amenities = sorted(storage.all(Amenity).values(), key=lambda z: z.name)\n    for state in states:\n        cities = sorted(state.cities, key=lambda y: y.name)\n    return render_template('10-hbnb_filters.html', states=states, amenities=amenities)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.10-hbnb_filters",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.10-hbnb_filters",
        "description": "web_flask.10-hbnb_filters",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.teardown_appcontext\ndef remove_current_session(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/hbnb_filters', strict_slashes=False)\ndef load_filters():\n    \"\"\"Load State, City and Amenity filters if found\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    amenities = sorted(storage.all(Amenity).values(), key=lambda z: z.name)",
        "detail": "web_flask.10-hbnb_filters",
        "documentation": {}
    },
    {
        "label": "teardown",
        "kind": 2,
        "importPath": "web_flask.100-hbnb",
        "description": "web_flask.100-hbnb",
        "peekOfCode": "def teardown(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/hbnb', strict_slashes=False)\ndef load_filters():\n    \"\"\"Load State, City, Place and Amenity filters if found\"\"\"\n    states = storage.all(State)\n    amenities = storage.all(Amenity)\n    places = storage.all(Place)\n    return render_template('100-hbnb.html', states=states, amenities=amenities, places=places)",
        "detail": "web_flask.100-hbnb",
        "documentation": {}
    },
    {
        "label": "load_filters",
        "kind": 2,
        "importPath": "web_flask.100-hbnb",
        "description": "web_flask.100-hbnb",
        "peekOfCode": "def load_filters():\n    \"\"\"Load State, City, Place and Amenity filters if found\"\"\"\n    states = storage.all(State)\n    amenities = storage.all(Amenity)\n    places = storage.all(Place)\n    return render_template('100-hbnb.html', states=states, amenities=amenities, places=places)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.100-hbnb",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.100-hbnb",
        "description": "web_flask.100-hbnb",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.teardown_appcontext\ndef teardown(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/hbnb', strict_slashes=False)\ndef load_filters():\n    \"\"\"Load State, City, Place and Amenity filters if found\"\"\"\n    states = storage.all(State)\n    amenities = storage.all(Amenity)",
        "detail": "web_flask.100-hbnb",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\nif __name__ == '__main__':",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "c_text",
        "kind": 2,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "def c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.2-c_route",
        "description": "web_flask.2-c_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.2-c_route",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "c_text",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "python_text",
        "kind": 2,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "def python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.3-python_route",
        "description": "web_flask.3-python_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.3-python_route",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "c_text",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\n@app.route('/number/<int:n>', strict_slashes=False)\ndef python_number(n):",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "python_text",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\n@app.route('/number/<int:n>', strict_slashes=False)\ndef python_number(n):\n    try:\n        return f'{n} is a number'\n    except TypeError:\n        return f'{n} must be an integer'\nif __name__ == '__main__':",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "python_number",
        "kind": 2,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "def python_number(n):\n    try:\n        return f'{n} is a number'\n    except TypeError:\n        return f'{n} must be an integer'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.4-number_route",
        "description": "web_flask.4-number_route",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.4-number_route",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "c_text",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\n@app.route('/number/<int:n>', strict_slashes=False)\ndef python_number(n):",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "python_text",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\n@app.route('/number/<int:n>', strict_slashes=False)\ndef python_number(n):\n    try:\n        return f'{n} is a number'\n    except TypeError:\n        return f'{n} must be an integer'\n@app.route('/number_template/<int:n>', strict_slashes=False)",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "python_number",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def python_number(n):\n    try:\n        return f'{n} is a number'\n    except TypeError:\n        return f'{n} must be an integer'\n@app.route('/number_template/<int:n>', strict_slashes=False)\ndef number_template(n):\n    try:\n        return render_template('5-number.html', n=n)\n    except TypeError:",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "number_template",
        "kind": 2,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "def number_template(n):\n    try:\n        return render_template('5-number.html', n=n)\n    except TypeError:\n        return f'{n} must be an integer'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.5-number_template",
        "description": "web_flask.5-number_template",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.route('/', strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.5-number_template",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "hbnb",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "c_text",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def c_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'C {text}'\n@app.route('/python', strict_slashes=False, defaults={'text': 'is_cool'})\n@app.route('/python/<text>', strict_slashes=False)\ndef python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\n@app.route('/number/<int:n>', strict_slashes=False)\ndef python_number(n):",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "python_text",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def python_text(text):\n    text = text.replace(\"_\", \" \")\n    return f'Python {text}'\n@app.route('/number/<int:n>', strict_slashes=False)\ndef python_number(n):\n    try:\n        return f'{n} is a number'\n    except TypeError:\n        return f'{n} must be an integer'\n@app.route('/number_template/<int:n>', strict_slashes=False)",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "python_number",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def python_number(n):\n    try:\n        return f'{n} is a number'\n    except TypeError:\n        return f'{n} must be an integer'\n@app.route('/number_template/<int:n>', strict_slashes=False)\ndef number_template(n):\n    try:\n        return render_template('5-number.html', n=n)\n    except TypeError:",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "number_template",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def number_template(n):\n    try:\n        return render_template('5-number.html', n=n)\n    except TypeError:\n        return f'{n} must be an integer'\n@app.route('/number_odd_or_even/<int:n>', strict_slashes=False)\ndef number_odd_or_even(n):\n    try:\n        is_even = n % 2 == 0\n        return render_template('6-number_odd_or_even.html',",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "number_odd_or_even",
        "kind": 2,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "def number_odd_or_even(n):\n    try:\n        is_even = n % 2 == 0\n        return render_template('6-number_odd_or_even.html',\n                               n=n, is_even=is_even)\n    except TypeError:\n        return f'{n} must be an integer'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.6-number_odd_or_even",
        "description": "web_flask.6-number_odd_or_even",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.route('/', strict_slashes=False)\ndef index():\n    return \"Hello HBNB!\"\n@app.route('/hbnb', strict_slashes=False)\ndef hbnb():\n    return \"HBNB\"\n@app.route('/c/<text>', strict_slashes=False)\ndef c_text(text):\n    text = text.replace(\"_\", \" \")",
        "detail": "web_flask.6-number_odd_or_even",
        "documentation": {}
    },
    {
        "label": "remove_current_session",
        "kind": 2,
        "importPath": "web_flask.7-states_list",
        "description": "web_flask.7-states_list",
        "peekOfCode": "def remove_current_session(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/states_list', strict_slashes=False)\ndef states_list():\n    \"\"\"Get the list of all states\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    return render_template('7-states_list.html', states=states)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.7-states_list",
        "documentation": {}
    },
    {
        "label": "states_list",
        "kind": 2,
        "importPath": "web_flask.7-states_list",
        "description": "web_flask.7-states_list",
        "peekOfCode": "def states_list():\n    \"\"\"Get the list of all states\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    return render_template('7-states_list.html', states=states)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)",
        "detail": "web_flask.7-states_list",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.7-states_list",
        "description": "web_flask.7-states_list",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.teardown_appcontext\ndef remove_current_session(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/states_list', strict_slashes=False)\ndef states_list():\n    \"\"\"Get the list of all states\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    return render_template('7-states_list.html', states=states)",
        "detail": "web_flask.7-states_list",
        "documentation": {}
    },
    {
        "label": "remove_current_session",
        "kind": 2,
        "importPath": "web_flask.8-cities_by_states",
        "description": "web_flask.8-cities_by_states",
        "peekOfCode": "def remove_current_session(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/cities_by_states', strict_slashes=False)\ndef cities_by_states():\n    \"\"\"Get the list of all states and cities by states\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    for state in states:\n        state.cities = sorted(state.cities, key=lambda y: y.name)\n        state.state_ref = state.id",
        "detail": "web_flask.8-cities_by_states",
        "documentation": {}
    },
    {
        "label": "cities_by_states",
        "kind": 2,
        "importPath": "web_flask.8-cities_by_states",
        "description": "web_flask.8-cities_by_states",
        "peekOfCode": "def cities_by_states():\n    \"\"\"Get the list of all states and cities by states\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    for state in states:\n        state.cities = sorted(state.cities, key=lambda y: y.name)\n        state.state_ref = state.id\n        for city in state.cities:\n            city.city_ref = city.id\n    return render_template('8-cities_by_states.html', states=states)\nif __name__ == '__main__':",
        "detail": "web_flask.8-cities_by_states",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.8-cities_by_states",
        "description": "web_flask.8-cities_by_states",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.teardown_appcontext\ndef remove_current_session(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/cities_by_states', strict_slashes=False)\ndef cities_by_states():\n    \"\"\"Get the list of all states and cities by states\"\"\"\n    states = sorted(storage.all(State).values(), key=lambda x: x.name)\n    for state in states:",
        "detail": "web_flask.8-cities_by_states",
        "documentation": {}
    },
    {
        "label": "teardown",
        "kind": 2,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "def teardown(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/states', defaults={'id': None}, strict_slashes=False)\n@app.route('/states/<id>', strict_slashes=False)\ndef states_id_found(id):\n    \"\"\"Get the list of cities related to the state id\"\"\"\n    states = storage.all(State).values()\n    for state in states:\n        if state.id == id:",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "states_id_found",
        "kind": 2,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "def states_id_found(id):\n    \"\"\"Get the list of cities related to the state id\"\"\"\n    states = storage.all(State).values()\n    for state in states:\n        if state.id == id:\n            return render_template('9-states.html', state=state, id=id)\n    if id is None:\n        return render_template('9-states.html', states=states, id=id)\n    return render_template('9-states.html')\nif __name__ == '__main__':",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web_flask.9-states",
        "description": "web_flask.9-states",
        "peekOfCode": "app = Flask(__name__, template_folder='./templates')\n@app.teardown_appcontext\ndef teardown(exception):\n    \"\"\"Close the SQLAlchemy session\"\"\"\n    storage.close()\n@app.route('/states', defaults={'id': None}, strict_slashes=False)\n@app.route('/states/<id>', strict_slashes=False)\ndef states_id_found(id):\n    \"\"\"Get the list of cities related to the state id\"\"\"\n    states = storage.all(State).values()",
        "detail": "web_flask.9-states",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "kind": 6,
        "importPath": "console",
        "description": "console",
        "peekOfCode": "class HBNBCommand(cmd.Cmd):\n    \"\"\" Contains the functionality for the HBNB console\"\"\"\n    # determines prompt for interactive/non-interactive modes\n    prompt = '(hbnb) ' if sys.__stdin__.isatty() else ''\n    classes = {\n               'BaseModel': BaseModel, 'User': User, 'Place': Place,\n               'State': State, 'City': City, 'Amenity': Amenity,\n               'Review': Review\n              }\n    dot_cmds = ['all', 'count', 'show', 'destroy', 'update']",
        "detail": "console",
        "documentation": {}
    }
]