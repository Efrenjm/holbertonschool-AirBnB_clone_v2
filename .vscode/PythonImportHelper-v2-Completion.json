[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "isExtraImport": true,
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "kind": 6,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "class DBStorage:\n    \"\"\"The engine that handles the database storage\"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Creates the engine instance and starts the session\"\"\"\n        user = os.environ.get('HBNB_MYSQL_USER')\n        pwd = os.environ.get('HBNB_MYSQL_PWD')\n        host = os.environ.get('HBNB_MYSQL_HOST')\n        db = os.environ.get('HBNB_MYSQL_DB')",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "kind": 6,
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "peekOfCode": "class FileStorage:\n    \"\"\"This class manages storage of hbnb models in JSON format\"\"\"\n    __file_path = 'file.json'\n    __objects = {}\n    def all(self, cls=None):\n        \"\"\"Returns a dictionary of models currently in storage\"\"\"\n        if cls is None:\n            return FileStorage.__objects\n        response = {key: val for key, val in FileStorage.__objects.items()\n                    if isinstance(val, cls)}",
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "kind": 6,
        "importPath": "models.amenity",
        "description": "models.amenity",
        "peekOfCode": "class Amenity(BaseModel):\n    name = \"\"",
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "class BaseModel:\n    \"\"\"A base class for all hbnb models\"\"\"\n    id = Column(String(60), nullable=False, primary_key=True)\n    created_at = Column(DateTime, nullable=False, default=datetime.now())\n    updated_at = Column(DateTime, nullable=False, default=datetime.now())\n    def __init__(self, *args, **kwargs):\n        \"\"\"Instantiates a new model\"\"\"\n        if not kwargs:\n            from models import storage\n            self.id = str(uuid.uuid4())",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel:\n    \"\"\"A base class for all hbnb models\"\"\"\n    id = Column(String(60), nullable=False, primary_key=True)\n    created_at = Column(DateTime, nullable=False, default=datetime.now())\n    updated_at = Column(DateTime, nullable=False, default=datetime.now())\n    def __init__(self, *args, **kwargs):\n        \"\"\"Instantiates a new model\"\"\"\n        if not kwargs:\n            from models import storage",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "models.city",
        "description": "models.city",
        "peekOfCode": "class City(BaseModel, Base):\n    \"\"\" The city class, contains state ID and name \"\"\"\n    __tablename__ = \"cities\"\n    name = Column(String(128), nullable=False)\n    state_id = Column(String(60), ForeignKey('states.id'), nullable=False)\n    # state = relationship('State', back_populates='cities')\n    # states = relationship(\"State\", backref=\"cities\", cascade=\"delete\")",
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "Place",
        "kind": 6,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "class Place(BaseModel):\n    \"\"\" A place to stay \"\"\"\n    city_id = \"\"\n    user_id = \"\"\n    name = \"\"\n    description = \"\"\n    number_rooms = 0\n    number_bathrooms = 0\n    max_guest = 0\n    price_by_night = 0",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "class Review(BaseModel):\n    \"\"\" Review classto store review information \"\"\"\n    place_id = \"\"\n    user_id = \"\"\n    text = \"\"",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "models.state",
        "description": "models.state",
        "peekOfCode": "class State(BaseModel, Base):\n    \"\"\" State class \"\"\"\n    __tablename__ = \"states\"\n    name = Column(String(128), nullable=False)\n    cities = relationship('City', backref='state', cascade='all, delete')\n    @property\n    def cities(self):\n        \"\"\"getter attribute to return list of City instances\"\"\"\n        from models import storage\n        from models.city import City",
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(BaseModel, Base):\n    \"\"\"This class defines a user by various attributes\"\"\"\n    __tablename__ = \"users\"\n    email = Column(String(128), nullable=False)\n    password = Column(String(128), nullable=False)\n    first_name = Column(String(128), nullable=False)\n    last_name = Column(String(128), nullable=False)",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "test_fileStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_file_storage",
        "description": "tests.test_models.test_engine.test_file_storage",
        "peekOfCode": "class test_fileStorage(unittest.TestCase):\n    \"\"\" Class to test the file storage method \"\"\"\n    def setUp(self):\n        \"\"\" Set up test environment \"\"\"\n        del_list = []\n        for key in storage._FileStorage__objects.keys():\n            del_list.append(key)\n        for key in del_list:\n            del storage._FileStorage__objects[key]\n    def tearDown(self):",
        "detail": "tests.test_models.test_engine.test_file_storage",
        "documentation": {}
    },
    {
        "label": "test_Amenity",
        "kind": 6,
        "importPath": "tests.test_models.test_amenity",
        "description": "tests.test_models.test_amenity",
        "peekOfCode": "class test_Amenity(test_basemodel):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Amenity\"\n        self.value = Amenity\n    def test_name2(self):\n        \"\"\" \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_amenity",
        "documentation": {}
    },
    {
        "label": "test_basemodel",
        "kind": 6,
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "peekOfCode": "class test_basemodel(unittest.TestCase):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = 'BaseModel'\n        self.value = BaseModel\n    def setUp(self):\n        \"\"\" \"\"\"\n        pass",
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "test_City",
        "kind": 6,
        "importPath": "tests.test_models.test_city",
        "description": "tests.test_models.test_city",
        "peekOfCode": "class test_City(test_basemodel):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"City\"\n        self.value = City\n    def test_state_id(self):\n        \"\"\" \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_city",
        "documentation": {}
    },
    {
        "label": "test_Place",
        "kind": 6,
        "importPath": "tests.test_models.test_place",
        "description": "tests.test_models.test_place",
        "peekOfCode": "class test_Place(test_basemodel):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Place\"\n        self.value = Place\n    def test_city_id(self):\n        \"\"\" \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_place",
        "documentation": {}
    },
    {
        "label": "test_review",
        "kind": 6,
        "importPath": "tests.test_models.test_review",
        "description": "tests.test_models.test_review",
        "peekOfCode": "class test_review(test_basemodel):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"Review\"\n        self.value = Review\n    def test_place_id(self):\n        \"\"\" \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_review",
        "documentation": {}
    },
    {
        "label": "test_state",
        "kind": 6,
        "importPath": "tests.test_models.test_state",
        "description": "tests.test_models.test_state",
        "peekOfCode": "class test_state(test_basemodel):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"State\"\n        self.value = State\n    def test_name3(self):\n        \"\"\" \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_state",
        "documentation": {}
    },
    {
        "label": "test_User",
        "kind": 6,
        "importPath": "tests.test_models.test_user",
        "description": "tests.test_models.test_user",
        "peekOfCode": "class test_User(test_basemodel):\n    \"\"\" \"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\" \"\"\"\n        super().__init__(*args, **kwargs)\n        self.name = \"User\"\n        self.value = User\n    def test_first_name(self):\n        \"\"\" \"\"\"\n        new = self.value()",
        "detail": "tests.test_models.test_user",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "kind": 6,
        "importPath": "console",
        "description": "console",
        "peekOfCode": "class HBNBCommand(cmd.Cmd):\n    \"\"\" Contains the functionality for the HBNB console\"\"\"\n    # determines prompt for interactive/non-interactive modes\n    prompt = '(hbnb) ' if sys.__stdin__.isatty() else ''\n    classes = {\n               'BaseModel': BaseModel, 'User': User, 'Place': Place,\n               'State': State, 'City': City, 'Amenity': Amenity,\n               'Review': Review\n              }\n    dot_cmds = ['all', 'count', 'show', 'destroy', 'update']",
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "fs",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "fs = FileStorage()\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create a new State\nnew_state = State()\nnew_state.name = \"California\"\nfs.new(new_state)",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create a new State\nnew_state = State()\nnew_state.name = \"California\"\nfs.new(new_state)\nfs.save()\nprint(\"New State: {}\".format(new_state))",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "new_state",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "new_state = State()\nnew_state.name = \"California\"\nfs.new(new_state)\nfs.save()\nprint(\"New State: {}\".format(new_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "new_state.name",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "new_state.name = \"California\"\nfs.new(new_state)\nfs.save()\nprint(\"New State: {}\".format(new_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create another State",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])\n# Create another State\nanother_state = State()\nanother_state.name = \"Nevada\"\nfs.new(another_state)\nfs.save()\nprint(\"Another State: {}\".format(another_state))",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "another_state",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "another_state = State()\nanother_state.name = \"Nevada\"\nfs.new(another_state)\nfs.save()\nprint(\"Another State: {}\".format(another_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])        ",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "another_state.name",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "another_state.name = \"Nevada\"\nfs.new(another_state)\nfs.save()\nprint(\"Another State: {}\".format(another_state))\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])        \n# Delete the new State",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])        \n# Delete the new State\nfs.delete(new_state)\n# All States\nall_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():",
        "detail": "main_delete",
        "documentation": {}
    },
    {
        "label": "all_states",
        "kind": 5,
        "importPath": "main_delete",
        "description": "main_delete",
        "peekOfCode": "all_states = fs.all(State)\nprint(\"All States: {}\".format(len(all_states.keys())))\nfor state_key in all_states.keys():\n    print(all_states[state_key])",
        "detail": "main_delete",
        "documentation": {}
    }
]